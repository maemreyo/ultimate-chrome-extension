// package.json
{
  "name": "ultimate-chrome-extension",
  "displayName": "Ultimate Chrome Extension",
  "version": "1.0.0",
  "description": "The most comprehensive Chrome Extension template with modern tech stack",
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "keywords": [
    "browser-extension",
    "chrome-extension",
    "plasmo",
    "react",
    "typescript",
    "supabase",
    "stripe"
  ],
  "engines": {
    "node": ">=18",
    "pnpm": ">=8"
  },
  "scripts": {
    "dev": "plasmo dev",
    "build": "plasmo build",
    "build:chrome": "plasmo build --target=chrome-mv3",
    "build:firefox": "plasmo build --target=firefox-mv2",
    "build:edge": "plasmo build --target=edge-mv3",
    "package": "plasmo package",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint . --ext .ts,.tsx",
    "lint:fix": "eslint . --ext .ts,.tsx --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,css,md}\"",
    "type-check": "tsc --noEmit",
    "analyze": "plasmo build --analyze",
    "clean": "rimraf .plasmo build",
    "prepare": "husky install"
  },
  "dependencies": {
    "@plasmohq/messaging": "^0.6.1",
    "@plasmohq/storage": "^1.9.0",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-progress": "^1.0.3",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-tabs": "^1.0.4",
    "@stripe/stripe-js": "^2.2.0",
    "@supabase/supabase-js": "^2.39.0",
    "@tanstack/react-query": "^5.12.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.0.0",
    "date-fns": "^2.30.0",
    "framer-motion": "^10.16.5",
    "lodash": "^4.17.21",
    "lucide-react": "^0.294.0",
    "next": "^14.0.3",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.4.1",
    "stripe": "^14.5.0",
    "tailwind-merge": "^2.1.0",
    "zustand": "^4.4.7"
  },
  "devDependencies": {
    "@ianvs/prettier-plugin-sort-imports": "^4.1.1",
    "@plasmohq/rps": "^1.8.7",
    "@testing-library/jest-dom": "^6.1.4",
    "@testing-library/react": "^14.1.2",
    "@types/chrome": "^0.0.253",
    "@types/jest": "^29.5.10",
    "@types/lodash": "^4.14.202",
    "@types/node": "^20.10.0",
    "@types/react": "^18.2.42",
    "@types/react-dom": "^18.2.17",
    "@typescript-eslint/eslint-plugin": "^6.13.1",
    "@typescript-eslint/parser": "^6.13.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.55.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "husky": "^8.0.3",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "lint-staged": "^15.1.0",
    "plasmo": "^0.84.0",
    "postcss": "^8.4.32",
    "prettier": "^3.1.0",
    "prettier-plugin-tailwindcss": "^0.5.7",
    "rimraf": "^5.0.5",
    "tailwindcss": "^3.3.6",
    "ts-jest": "^29.1.1",
    "typescript": "^5.3.2"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{css,md,json}": [
      "prettier --write"
    ]
  },
  "manifest": {
    "host_permissions": [
      "https://*/*",
      "http://*/*"
    ],
    "permissions": [
      "storage",
      "tabs",
      "contextMenus",
      "notifications",
      "alarms",
      "identity",
      "sidePanel"
    ],
    "optional_permissions": [
      "bookmarks",
      "history",
      "downloads",
      "webNavigation"
    ],
    "web_accessible_resources": [
      {
        "resources": [
          "assets/*",
          "tabs/*"
        ],
        "matches": [
          "<all_urls>"
        ]
      }
    ]
  }
}



# create-extension.sh
#!/bin/bash
# - Ultimate Chrome Extension Template Initialization Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ASCII Art Logo
print_logo() {
    echo -e "${BLUE}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë   üöÄ ULTIMATE CHROME EXTENSION TEMPLATE                       ‚ïë
‚ïë                                                               ‚ïë
‚ïë   The most comprehensive Chrome Extension starter template    ‚ïë
‚ïë   with React, TypeScript, Supabase, and Stripe              ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Function to print colored messages
print_message() {
    echo -e "${GREEN}‚úì${NC} $1"
}

print_error() {
    echo -e "${RED}‚úó${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}‚ö†${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    echo -e "\n${BLUE}Checking prerequisites...${NC}\n"
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js is not installed. Please install Node.js 18 or higher."
        exit 1
    else
        NODE_VERSION=$(node -v | cut -d 'v' -f 2 | cut -d '.' -f 1)
        if [ "$NODE_VERSION" -lt 18 ]; then
            print_error "Node.js version must be 18 or higher. Current version: $(node -v)"
            exit 1
        fi
        print_message "Node.js $(node -v) detected"
    fi
    
    # Check package manager
    if command -v pnpm &> /dev/null; then
        PACKAGE_MANAGER="pnpm"
        print_message "pnpm detected (recommended)"
    elif command -v npm &> /dev/null; then
        PACKAGE_MANAGER="npm"
        print_warning "npm detected. Consider installing pnpm for better performance: npm install -g pnpm"
    else
        print_error "No package manager found. Please install npm or pnpm."
        exit 1
    fi
    
    # Check Git
    if ! command -v git &> /dev/null; then
        print_error "Git is not installed. Please install Git."
        exit 1
    else
        print_message "Git detected"
    fi
}

# Get project information
get_project_info() {
    echo -e "\n${BLUE}Project Setup${NC}\n"
    
    # Project name
    read -p "Enter your extension name (e.g., my-awesome-extension): " PROJECT_NAME
    if [ -z "$PROJECT_NAME" ]; then
        PROJECT_NAME="my-chrome-extension"
    fi
    PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/ /-/g')
    
    # Display name
    read -p "Enter display name (e.g., My Awesome Extension): " DISPLAY_NAME
    if [ -z "$DISPLAY_NAME" ]; then
        DISPLAY_NAME="My Chrome Extension"
    fi
    
    # Description
    read -p "Enter description: " DESCRIPTION
    if [ -z "$DESCRIPTION" ]; then
        DESCRIPTION="A powerful Chrome extension built with modern web technologies"
    fi
    
    # Author
    read -p "Enter author name: " AUTHOR_NAME
    if [ -z "$AUTHOR_NAME" ]; then
        AUTHOR_NAME="Your Name"
    fi
    
    read -p "Enter author email: " AUTHOR_EMAIL
    if [ -z "$AUTHOR_EMAIL" ]; then
        AUTHOR_EMAIL="your.email@example.com"
    fi
    
    # Features selection
    echo -e "\n${BLUE}Select features to include:${NC}"
    read -p "Include Supabase authentication? (Y/n): " INCLUDE_SUPABASE
    INCLUDE_SUPABASE=${INCLUDE_SUPABASE:-Y}
    
    read -p "Include Stripe payments? (Y/n): " INCLUDE_STRIPE
    INCLUDE_STRIPE=${INCLUDE_STRIPE:-Y}
    
    read -p "Include analytics? (Y/n): " INCLUDE_ANALYTICS
    INCLUDE_ANALYTICS=${INCLUDE_ANALYTICS:-Y}
    
    # Confirm
    echo -e "\n${BLUE}Configuration Summary:${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "Project name: $PROJECT_NAME"
    echo "Display name: $DISPLAY_NAME"
    echo "Description: $DESCRIPTION"
    echo "Author: $AUTHOR_NAME <$AUTHOR_EMAIL>"
    echo "Supabase: $([ "$INCLUDE_SUPABASE" = "Y" ] && echo "‚úì" || echo "‚úó")"
    echo "Stripe: $([ "$INCLUDE_STRIPE" = "Y" ] && echo "‚úì" || echo "‚úó")"
    echo "Analytics: $([ "$INCLUDE_ANALYTICS" = "Y" ] && echo "‚úì" || echo "‚úó")"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    read -p $'\nProceed with this configuration? (Y/n): ' CONFIRM
    CONFIRM=${CONFIRM:-Y}
    if [ "$CONFIRM" != "Y" ] && [ "$CONFIRM" != "y" ]; then
        echo "Setup cancelled."
        exit 0
    fi
}

# Clone template
clone_template() {
    echo -e "\n${BLUE}Creating project...${NC}\n"
    
    # Clone from template (you'll need to replace with your actual template URL)
    TEMPLATE_URL="https://github.com/yourusername/ultimate-chrome-extension.git"
    
    if [ -d "$PROJECT_NAME" ]; then
        print_error "Directory $PROJECT_NAME already exists!"
        exit 1
    fi
    
    print_message "Cloning template..."
    git clone --depth 1 "$TEMPLATE_URL" "$PROJECT_NAME" || {
        print_error "Failed to clone template. Using local copy instead..."
        cp -r "$(dirname "$0")" "$PROJECT_NAME"
    }
    
    cd "$PROJECT_NAME"
    
    # Remove git history
    rm -rf .git
    git init
    print_message "Initialized new git repository"
}

# Customize project
customize_project() {
    echo -e "\n${BLUE}Customizing project...${NC}\n"
    
    # Update package.json
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS
        sed -i '' "s/\"name\": \"ultimate-chrome-extension\"/\"name\": \"$PROJECT_NAME\"/" package.json
        sed -i '' "s/\"displayName\": \"Ultimate Chrome Extension\"/\"displayName\": \"$DISPLAY_NAME\"/" package.json
        sed -i '' "s/\"description\": \".*\"/\"description\": \"$DESCRIPTION\"/" package.json
        sed -i '' "s/\"author\": \".*\"/\"author\": \"$AUTHOR_NAME <$AUTHOR_EMAIL>\"/" package.json
    else
        # Linux
        sed -i "s/\"name\": \"ultimate-chrome-extension\"/\"name\": \"$PROJECT_NAME\"/" package.json
        sed -i "s/\"displayName\": \"Ultimate Chrome Extension\"/\"displayName\": \"$DISPLAY_NAME\"/" package.json
        sed -i "s/\"description\": \".*\"/\"description\": \"$DESCRIPTION\"/" package.json
        sed -i "s/\"author\": \".*\"/\"author\": \"$AUTHOR_NAME <$AUTHOR_EMAIL>\"/" package.json
    fi
    
    # Remove features if not selected
    if [ "$INCLUDE_SUPABASE" != "Y" ] && [ "$INCLUDE_SUPABASE" != "y" ]; then
        print_message "Removing Supabase integration..."
        rm -rf src/core/supabase.ts
        rm -rf src/hooks/useSupabaseAuth.ts
        rm -rf supabase/
        rm -rf src/background/messages/supabase.ts
        # Remove Supabase dependencies from package.json
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        delete pkg.dependencies['@supabase/supabase-js'];
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        "
    fi
    
    if [ "$INCLUDE_STRIPE" != "Y" ] && [ "$INCLUDE_STRIPE" != "y" ]; then
        print_message "Removing Stripe integration..."
        rm -rf src/core/stripe.ts
        rm -rf src/tabs/pricing.tsx
        rm -rf api/stripe/
        rm -rf src/background/messages/stripe.ts
        # Remove Stripe dependencies from package.json
        node -e "
        const fs = require('fs');
        const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
        delete pkg.dependencies['@stripe/stripe-js'];
        delete pkg.dependencies['stripe'];
        fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2));
        "
    fi
    
    # Create .env files
    print_message "Creating environment files..."
    cat > .env.example << EOF
# Supabase
PLASMO_PUBLIC_SUPABASE_URL=your_supabase_url
PLASMO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

# Stripe
PLASMO_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_publishable_key
STRIPE_SECRET_KEY=your_stripe_secret_key
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret

# API
PLASMO_PUBLIC_API_URL=http://localhost:3000

# Google OAuth
GOOGLE_OAUTH_CLIENT_ID=your_google_oauth_client_id

# Extension
CRX_PUBLIC_KEY=your_extension_public_key

# Analytics
PLASMO_PUBLIC_GA_MEASUREMENT_ID=your_ga_measurement_id

# Sentry (Error Tracking)
PLASMO_PUBLIC_SENTRY_DSN=your_sentry_dsn
EOF
    
    cp .env.example .env.development
    cp .env.example .env.production
    
    print_message "Project customized successfully!"
}

# Install dependencies
install_dependencies() {
    echo -e "\n${BLUE}Installing dependencies...${NC}\n"
    
    if [ "$PACKAGE_MANAGER" = "pnpm" ]; then
        pnpm install
    else
        npm install
    fi
    
    print_message "Dependencies installed!"
}

# Generate assets
generate_assets() {
    echo -e "\n${BLUE}Generating assets...${NC}\n"
    
    # Create assets directory
    mkdir -p assets
    
    # Generate placeholder icons
    for size in 16 48 128; do
        cat > "assets/icon-${size}.png" << EOF
# Placeholder for ${size}x${size} icon
# Replace with your actual icon
EOF
    done
    
    print_message "Asset placeholders created!"
}

# Setup git hooks
setup_git_hooks() {
    echo -e "\n${BLUE}Setting up git hooks...${NC}\n"
    
    npx husky install
    npx husky add .husky/pre-commit "npx lint-staged"
    
    print_message "Git hooks configured!"
}

# Final instructions
print_final_instructions() {
    echo -e "\n${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}‚úÖ Extension created successfully!${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    
    echo -e "\n${BLUE}Next steps:${NC}\n"
    echo "1. Navigate to your project:"
    echo "   ${YELLOW}cd $PROJECT_NAME${NC}"
    echo ""
    echo "2. Update environment variables:"
    echo "   ${YELLOW}cp .env.example .env.development${NC}"
    echo "   ${YELLOW}code .env.development${NC}"
    echo ""
    echo "3. Add your extension icons:"
    echo "   - assets/icon-16.png (16x16)"
    echo "   - assets/icon-48.png (48x48)"
    echo "   - assets/icon-128.png (128x128)"
    echo ""
    echo "4. Start development:"
    echo "   ${YELLOW}$PACKAGE_MANAGER run dev${NC}"
    echo ""
    echo "5. Load extension in Chrome:"
    echo "   - Open ${YELLOW}chrome://extensions/${NC}"
    echo "   - Enable Developer mode"
    echo "   - Click 'Load unpacked'"
    echo "   - Select ${YELLOW}build/chrome-mv3-dev${NC} folder"
    echo ""
    echo -e "${BLUE}üìö Documentation:${NC} https://github.com/yourusername/ultimate-chrome-extension"
    echo -e "${BLUE}üí¨ Discord:${NC} https://discord.gg/yourcommunity"
    echo ""
    echo -e "${GREEN}Happy coding! üöÄ${NC}"
}

# Main execution
main() {
    clear
    print_logo
    check_prerequisites
    get_project_info
    clone_template
    customize_project
    install_dependencies
    generate_assets
    setup_git_hooks
    print_final_instructions
}

# Run main function
main



# .env.example
# Copy this file to .env.development and .env.production and fill in your values

# ============================================
# SUPABASE CONFIGURATION
# ============================================
# Get these from: https://app.supabase.com/project/YOUR_PROJECT/settings/api
PLASMO_PUBLIC_SUPABASE_URL=https://xxxxxxxxxxxxx.supabase.co
PLASMO_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... # Only for server-side

# ============================================
# STRIPE CONFIGURATION
# ============================================
# Get these from: https://dashboard.stripe.com/test/apikeys
PLASMO_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_xxxxxxxxxxxxx
STRIPE_SECRET_KEY=sk_test_xxxxxxxxxxxxx
STRIPE_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxx

# Stripe Price IDs (create products first)
STRIPE_PRICE_ID_PRO=price_xxxxxxxxxxxxx
STRIPE_PRICE_ID_PREMIUM=price_xxxxxxxxxxxxx

# ============================================
# API CONFIGURATION
# ============================================
PLASMO_PUBLIC_API_URL=http://localhost:3000
API_SECRET_KEY=your_api_secret_key_here

# ============================================
# GOOGLE OAUTH
# ============================================
# Get from: https://console.cloud.google.com/apis/credentials
GOOGLE_OAUTH_CLIENT_ID=xxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com
GOOGLE_OAUTH_CLIENT_SECRET=GOCSPX-xxxxxxxxxxxxx

# ============================================
# EXTENSION CONFIGURATION
# ============================================
# Get your extension ID from chrome://extensions after first install
EXTENSION_ID=your_extension_id_here

# Public key for extension (get from Chrome Web Store developer dashboard)
CRX_PUBLIC_KEY=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA...

# ============================================
# ANALYTICS & MONITORING
# ============================================
# Google Analytics 4
PLASMO_PUBLIC_GA_MEASUREMENT_ID=G-XXXXXXXXXX

# Sentry Error Tracking
PLASMO_PUBLIC_SENTRY_DSN=https://xxxxxxxxxxxxx@xxx.ingest.sentry.io/xxxxxxxxxxxxx
SENTRY_AUTH_TOKEN=xxxxxxxxxxxxx
SENTRY_ORG=your-org
SENTRY_PROJECT=your-project

# PostHog Analytics (optional)
PLASMO_PUBLIC_POSTHOG_KEY=phc_xxxxxxxxxxxxx
PLASMO_PUBLIC_POSTHOG_HOST=https://app.posthog.com

# ============================================
# EMAIL CONFIGURATION (optional)
# ============================================
# SendGrid
SENDGRID_API_KEY=SG.xxxxxxxxxxxxx
SENDGRID_FROM_EMAIL=noreply@yourdomain.com
SENDGRID_FROM_NAME=Your Extension Name

# OR Resend
RESEND_API_KEY=re_xxxxxxxxxxxxx

# ============================================
# DEVELOPMENT
# ============================================
# Development mode flags
PLASMO_PUBLIC_DEV_MODE=true
PLASMO_PUBLIC_DEBUG_MODE=false

# Hot reload settings
HMR_HOST=localhost
HMR_PORT=1815

# ============================================
# FEATURE FLAGS
# ============================================
PLASMO_PUBLIC_FEATURE_PAYMENTS=true
PLASMO_PUBLIC_FEATURE_ANALYTICS=true
PLASMO_PUBLIC_FEATURE_SOCIAL_LOGIN=true
PLASMO_PUBLIC_FEATURE_DARK_MODE=true

# ============================================
# RATE LIMITING
# ============================================
# API rate limits (requests per minute)
RATE_LIMIT_FREE=60
RATE_LIMIT_PRO=300
RATE_LIMIT_PREMIUM=1000

# ============================================
# STORAGE LIMITS
# ============================================
# Storage limits in MB
STORAGE_LIMIT_FREE=10
STORAGE_LIMIT_PRO=100
STORAGE_LIMIT_PREMIUM=1000




// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./src/pages/**/*.{js,jsx,ts,tsx}",
    "./src/components/**/*.{js,jsx,ts,tsx}",
    "./src/popup/**/*.{js,jsx,ts,tsx}",
    "./src/options/**/*.{js,jsx,ts,tsx}",
    "./src/newtab/**/*.{js,jsx,ts,tsx}",
    "./src/sidepanel/**/*.{js,jsx,ts,tsx}",
    "./src/contents/**/*.{js,jsx,ts,tsx}",
    "./src/tabs/**/*.{js,jsx,ts,tsx}"
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "fade-in": {
          from: { opacity: "0" },
          to: { opacity: "1" },
        },
        "fade-out": {
          from: { opacity: "1" },
          to: { opacity: "0" },
        },
        "slide-in-from-top": {
          from: { transform: "translateY(-100%)" },
          to: { transform: "translateY(0)" },
        },
        "slide-in-from-bottom": {
          from: { transform: "translateY(100%)" },
          to: { transform: "translateY(0)" },
        },
        "slide-in-from-left": {
          from: { transform: "translateX(-100%)" },
          to: { transform: "translateX(0)" },
        },
        "slide-in-from-right": {
          from: { transform: "translateX(100%)" },
          to: { transform: "translateX(0)" },
        },
        "bounce-in": {
          "0%": {
            transform: "scale(0.3)",
            opacity: "0",
          },
          "50%": {
            transform: "scale(1.05)",
          },
          "70%": {
            transform: "scale(0.9)",
          },
          "100%": {
            transform: "scale(1)",
            opacity: "1",
          },
        },
        shimmer: {
          "100%": {
            transform: "translateX(100%)",
          },
        },
        spin: {
          from: { transform: "rotate(0deg)" },
          to: { transform: "rotate(360deg)" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.3s ease-out",
        "fade-out": "fade-out 0.3s ease-out",
        "slide-in-from-top": "slide-in-from-top 0.3s ease-out",
        "slide-in-from-bottom": "slide-in-from-bottom 0.3s ease-out",
        "slide-in-from-left": "slide-in-from-left 0.3s ease-out",
        "slide-in-from-right": "slide-in-from-right 0.3s ease-out",
        "bounce-in": "bounce-in 0.5s ease-out",
        shimmer: "shimmer 2s linear infinite",
        spin: "spin 1s linear infinite",
      },
      fontFamily: {
        sans: ["Inter", "system-ui", "-apple-system", "sans-serif"],
        mono: ["JetBrains Mono", "monospace"],
      },
    },
  },
  plugins: [
    require("@tailwindcss/typography"),
    require("tailwindcss-animate"),
    // Custom plugin for Plasmo-specific styles
    function ({ addUtilities }) {
      addUtilities({
        ".plasmo-hidden": {
          display: "none !important",
        },
        ".plasmo-inline-flex": {
          display: "inline-flex",
        },
        ".plasmo-flex": {
          display: "flex",
        },
        ".plasmo-flex-row": {
          flexDirection: "row",
        },
        ".plasmo-items-center": {
          alignItems: "center",
        },
        ".plasmo-justify-center": {
          justifyContent: "center",
        },
      });
    },
  ],
};



// tsconfig.json
{
  "extends": "plasmo/templates/tsconfig.base",
  "exclude": ["node_modules"],
  "include": [
    ".plasmo/index.d.ts",
    "./**/*.ts",
    "./**/*.tsx",
    "./src/**/*.ts",
    "./src/**/*.tsx"
  ],
  "compilerOptions": {
    "target": "esnext",
    "module": "esnext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "react-jsx",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "~*": ["./src/*"],
      "@/*": ["./src/*"]
    },
    "types": [
      "chrome",
      "node",
      "jest",
      "@testing-library/jest-dom"
    ],
    "allowSyntheticDefaultImports": true,
    "declaration": true,
    "declarationMap": true,
    "sourceMap": true,
    "downlevelIteration": true,
    "experimentalDecorators": true,
    "removeComments": false,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": false,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false
  }
}




# .github/workflows/build-and-test.yml
name: Build and Test

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
      
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
      
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run type checking
        run: pnpm type-check
      
      - name: Run linting
        run: pnpm lint
      
      - name: Run tests
        run: pnpm test:coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
      
      - name: Build extension
        run: |
          pnpm build:chrome
          pnpm build:firefox
          pnpm build:edge
      
      - name: Upload Chrome build artifact
        uses: actions/upload-artifact@v3
        with:
          name: chrome-extension-${{ github.sha }}
          path: build/chrome-mv3-prod
      
      - name: Upload Firefox build artifact
        uses: actions/upload-artifact@v3
        with:
          name: firefox-extension-${{ github.sha }}
          path: build/firefox-mv2-prod
      
      - name: Upload Edge build artifact
        uses: actions/upload-artifact@v3
        with:
          name: edge-extension-${{ github.sha }}
          path: build/edge-mv3-prod
      
      - name: Check bundle size
        run: |
          echo "Chrome bundle size:"
          du -sh build/chrome-mv3-prod
          echo "Firefox bundle size:"
          du -sh build/firefox-mv2-prod
          echo "Edge bundle size:"
          du -sh build/edge-mv3-prod


# .github/workflows/publish.yml
name: Publish Extension

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run tests
        run: pnpm test
      
      - name: Build extension
        run: |
          pnpm build:chrome
          pnpm build:firefox
          pnpm build:edge
      
      - name: Package extensions
        run: pnpm package
      
      - name: Publish to Chrome Web Store
        uses: PlasmoHQ/bpp@v3
        with:
          keys: ${{ secrets.CHROME_BPP_KEYS }}
          artifact: build/chrome-mv3-prod.zip
          target: chrome
      
      - name: Publish to Firefox Add-ons
        uses: PlasmoHQ/bpp@v3
        with:
          keys: ${{ secrets.FIREFOX_BPP_KEYS }}
          artifact: build/firefox-mv2-prod.zip
          target: firefox
      
      - name: Publish to Edge Add-ons
        uses: PlasmoHQ/bpp@v3
        with:
          keys: ${{ secrets.EDGE_BPP_KEYS }}
          artifact: build/edge-mv3-prod.zip
          target: edge
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/chrome-mv3-prod.zip
            build/firefox-mv2-prod.zip
            build/edge-mv3-prod.zip
          body: |
            ## üöÄ Extension v${{ github.ref_name }}
            
            ### Chrome Web Store
            [Install from Chrome Web Store](https://chrome.google.com/webstore/detail/${{ secrets.CHROME_EXTENSION_ID }})
            
            ### Firefox Add-ons
            [Install from Firefox Add-ons](https://addons.mozilla.org/addon/${{ secrets.FIREFOX_ADDON_ID }})
            
            ### Microsoft Edge Add-ons
            [Install from Edge Add-ons](https://microsoftedge.microsoft.com/addons/detail/${{ secrets.EDGE_EXTENSION_ID }})
            
            ### Manual Installation
            Download the appropriate ZIP file below for your browser.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Notify Discord
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Extension Published"
          description: "Version ${{ github.ref_name }} has been published to all stores!"
          color: 0x00ff00




// .eslintrc.json
{
  "root": true,
  "env": {
    "browser": true,
    "es2021": true,
    "node": true,
    "webextensions": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": ["./tsconfig.json"]
  },
  "plugins": [
    "react",
    "react-hooks",
    "@typescript-eslint"
  ],
  "rules": {
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "react/display-name": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/no-non-null-assertion": "warn",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/ban-ts-comment": "warn",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": {
          "attributes": false
        }
      }
    ],
    "no-console": [
      "warn",
      {
        "allow": ["warn", "error"]
      }
    ],
    "prefer-const": "error",
    "no-duplicate-imports": "error",
    "no-undef": "off",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn"
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "ignorePatterns": [
    "node_modules",
    "build",
    ".plasmo",
    "*.config.js",
    "*.config.ts"
  ]
}






// jest.config.js
/** @type {import('jest').Config} */
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  roots: ['<rootDir>/src'],
  testMatch: [
    '**/__tests__/**/*.+(ts|tsx|js)',
    '**/?(*.)+(spec|test).+(ts|tsx|js)'
  ],
  transform: {
    '^.+\\.(ts|tsx)$': ['ts-jest', {
      tsconfig: {
        jsx: 'react-jsx',
      },
    }],
  },
  moduleNameMapper: {
    '^~(.*)$': '<rootDir>/src$1',
    '^@/(.*)$': '<rootDir>/src/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
    '\\.(jpg|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': '<rootDir>/__mocks__/fileMock.js',
  },
  setupFilesAfterEnv: ['<rootDir>/src/test-utils/setup.ts'],
  collectCoverageFrom: [
    'src/**/*.{ts,tsx}',
    '!src/**/*.d.ts',
    '!src/**/*.stories.{ts,tsx}',
    '!src/test-utils/**',
    '!src/types/**',
  ],
  coverageThreshold: {
    global: {
      branches: 70,
      functions: 70,
      lines: 70,
      statements: 70,
    },
  },
  moduleFileExtensions: ['ts', 'tsx', 'js', 'jsx', 'json', 'node'],
  testTimeout: 10000,
  globals: {
    chrome: {
      runtime: {
        id: 'test-extension-id',
        sendMessage: jest.fn(),
        onMessage: {
          addListener: jest.fn(),
        },
      },
      storage: {
        local: {
          get: jest.fn(),
          set: jest.fn(),
          remove: jest.fn(),
        },
        sync: {
          get: jest.fn(),
          set: jest.fn(),
          remove: jest.fn(),
        },
      },
      tabs: {
        query: jest.fn(),
        create: jest.fn(),
        update: jest.fn(),
        remove: jest.fn(),
      },
      identity: {
        getAuthToken: jest.fn(),
      },
    },
  },
};





// src/test-utils/setup.ts
import '@testing-library/jest-dom'
import { TextEncoder, TextDecoder } from 'util'

// Polyfill for TextEncoder/TextDecoder
global.TextEncoder = TextEncoder
global.TextDecoder = TextDecoder as any

// Mock chrome API
global.chrome = {
  runtime: {
    id: 'test-extension-id',
    sendMessage: jest.fn(),
    onMessage: {
      addListener: jest.fn(),
      removeListener: jest.fn(),
      hasListener: jest.fn(),
    },
    getManifest: jest.fn(() => ({
      version: '1.0.0',
      name: 'Test Extension',
    })),
    getURL: jest.fn((path) => `chrome-extension://test-extension-id/${path}`),
    lastError: null,
  },
  storage: {
    local: {
      get: jest.fn((keys, callback) => {
        callback?.({})
        return Promise.resolve({})
      }),
      set: jest.fn((items, callback) => {
        callback?.()
        return Promise.resolve()
      }),
      remove: jest.fn((keys, callback) => {
        callback?.()
        return Promise.resolve()
      }),
      clear: jest.fn((callback) => {
        callback?.()
        return Promise.resolve()
      }),
    },
    sync: {
      get: jest.fn((keys, callback) => {
        callback?.({})
        return Promise.resolve({})
      }),
      set: jest.fn((items, callback) => {
        callback?.()
        return Promise.resolve()
      }),
      remove: jest.fn((keys, callback) => {
        callback?.()
        return Promise.resolve()
      }),
      clear: jest.fn((callback) => {
        callback?.()
        return Promise.resolve()
      }),
    },
  },
  tabs: {
    query: jest.fn((queryInfo, callback) => {
      callback?.([])
      return Promise.resolve([])
    }),
    create: jest.fn((createProperties, callback) => {
      const tab = { id: 1, ...createProperties }
      callback?.(tab)
      return Promise.resolve(tab)
    }),
    update: jest.fn((tabId, updateProperties, callback) => {
      const tab = { id: tabId, ...updateProperties }
      callback?.(tab)
      return Promise.resolve(tab)
    }),
    remove: jest.fn((tabIds, callback) => {
      callback?.()
      return Promise.resolve()
    }),
  },
  identity: {
    getAuthToken: jest.fn((details, callback) => {
      callback?.('test-auth-token')
      return Promise.resolve('test-auth-token')
    }),
  },
  contextMenus: {
    create: jest.fn(),
    update: jest.fn(),
    remove: jest.fn(),
    removeAll: jest.fn(),
    onClicked: {
      addListener: jest.fn(),
      removeListener: jest.fn(),
    },
  },
  notifications: {
    create: jest.fn((notificationId, options, callback) => {
      callback?.(notificationId)
      return Promise.resolve(notificationId)
    }),
    clear: jest.fn((notificationId, callback) => {
      callback?.(true)
      return Promise.resolve(true)
    }),
    getPermissionLevel: jest.fn((callback) => {
      callback?.('granted')
      return Promise.resolve('granted')
    }),
  },
  alarms: {
    create: jest.fn(),
    clear: jest.fn(),
    clearAll: jest.fn(),
    onAlarm: {
      addListener: jest.fn(),
      removeListener: jest.fn(),
    },
  },
  action: {
    setBadgeText: jest.fn(),
    setBadgeBackgroundColor: jest.fn(),
    setIcon: jest.fn(),
    setTitle: jest.fn(),
  },
} as any

// Mock window.matchMedia
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    removeListener: jest.fn(),
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn(),
  })),
})

// Mock IntersectionObserver
global.IntersectionObserver = class IntersectionObserver {
  constructor() {}
  disconnect() {}
  observe() {}
  unobserve() {}
  takeRecords() {
    return []
  }
} as any

// Mock ResizeObserver
global.ResizeObserver = class ResizeObserver {
  constructor() {}
  disconnect() {}
  observe() {}
  unobserve() {}
} as any

// Suppress console errors during tests
const originalError = console.error
beforeAll(() => {
  console.error = (...args) => {
    if (
      typeof args[0] === 'string' &&
      (args[0].includes('Warning: ReactDOM.render') ||
       args[0].includes('Warning: `ReactDOMTestUtils.act`'))
    ) {
      return
    }
    originalError.call(console, ...args)
  }
})

afterAll(() => {
  console.error = originalError
})




// .prettierrc
{
  "semi": false,
  "trailingComma": "none",
  "singleQuote": false,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "always",
  "endOfLine": "lf",
  "bracketSameLine": false,
  "plugins": [
    "@ianvs/prettier-plugin-sort-imports",
    "prettier-plugin-tailwindcss"
  ],
  "importOrder": [
    "^react",
    "^next",
    "<THIRD_PARTY_MODULES>",
    "^@plasmohq",
    "^@/",
    "^~/",
    "^[./]"
  ],
  "importOrderSeparation": true,
  "importOrderSortSpecifiers": true,
  "tailwindFunctions": ["cn", "clsx", "twMerge"]
}



# .gitignore

# Dependencies
node_modules/
.pnp
.pnp.js

# Build outputs
build/
dist/
.plasmo/
.next/
out/

# Environment files
.env
.env.local
.env.development
.env.production
.env.test
.env*.local

# Development
.DS_Store
*.pem
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Editor directories and files
.vscode/*
!.vscode/extensions.json
!.vscode/settings.json
.idea/
*.swp
*.swo
*~

# Testing
coverage/
.nyc_output/
*.lcov

# TypeScript
*.tsbuildinfo
tsconfig.tsbuildinfo

# Extension specific
chrome-extension.zip
firefox-extension.zip
edge-extension.zip
*.crx
*.xpi
*.pem
key.pem

# Temporary files
*.tmp
*.temp
.cache/
tmp/
temp/

# OS files
Thumbs.db
desktop.ini

# Logs
logs/
*.log

# Backup files
*.backup
*.bak

# Lock files (keep only the one you use)
# package-lock.json
# yarn.lock
# pnpm-lock.yaml

# Production secrets
.env.production.local
secrets/

# Analytics
.sentryclirc

# Generated files
src/generated/

# Plasmo specific
.plasmo/
.cache/
build/

# Storage files
*.sqlite
*.sqlite3
*.db

# Archives
*.zip
*.tar.gz
*.rar

# Certificates
*.cert
*.crt
*.key

# Misc
.turbo/
.vercel/
.netlify/


// SETUP.md

# üöÄ Extension Setup Guide

This guide will walk you through setting up your new Chrome extension from the Ultimate Chrome Extension Template.

## üìã Table of Contents

1. [Quick Start](#quick-start)
2. [Environment Setup](#environment-setup)
3. [Database Setup (Supabase)](#database-setup-supabase)
4. [Payment Setup (Stripe)](#payment-setup-stripe)
5. [Authentication Setup](#authentication-setup)
6. [Development Workflow](#development-workflow)
7. [Testing](#testing)
8. [Deployment](#deployment)
9. [Troubleshooting](#troubleshooting)

## üèÉ Quick Start

### Using the Setup Script (Recommended)

```bash
# Download and run the setup script
curl -o create-extension.sh https://raw.githubusercontent.com/yourusername/ultimate-chrome-extension/main/create-extension.sh
chmod +x create-extension.sh
./create-extension.sh
```

### Manual Setup

```bash
# Clone the template
git clone https://github.com/yourusername/ultimate-chrome-extension.git my-extension
cd my-extension

# Install dependencies
pnpm install # or npm install

# Copy environment files
cp .env.example .env.development
cp .env.example .env.production

# Start development
pnpm dev
```

## üîß Environment Setup

### 1. Install Prerequisites

- **Node.js** 18+ (check with `node -v`)
- **pnpm** (recommended) or npm
  ```bash
  npm install -g pnpm
  ```
- **Git** for version control
- **Chrome/Edge/Brave** browser for testing

### 2. Configure Environment Variables

Edit `.env.development`:

```env
# Required for basic functionality
PLASMO_PUBLIC_API_URL=http://localhost:3000

# Add these as you set up each service
PLASMO_PUBLIC_SUPABASE_URL=your_supabase_url
PLASMO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
# ... etc
```

## üóÑÔ∏è Database Setup (Supabase)

### 1. Create Supabase Project

1. Go to [supabase.com](https://supabase.com) and create an account
2. Create a new project
3. Wait for the project to be provisioned

### 2. Get API Keys

1. Go to Settings ‚Üí API
2. Copy:
   - `Project URL` ‚Üí `PLASMO_PUBLIC_SUPABASE_URL`
   - `anon public` key ‚Üí `PLASMO_PUBLIC_SUPABASE_ANON_KEY`
   - `service_role` key ‚Üí `SUPABASE_SERVICE_KEY` (backend only)

### 3. Run Database Migrations

1. Go to SQL Editor in Supabase Dashboard
2. Copy and run the migration from `supabase/migrations/001_initial_schema.sql`
3. Verify tables are created: `users`, `user_data`

### 4. Configure Authentication

1. Go to Authentication ‚Üí Providers
2. Enable Email/Password
3. Enable Google OAuth (optional):
   - Add authorized redirect URLs:
     ```
     http://localhost:3000/auth/callback
     https://yourdomain.com/auth/callback
     ```

### 5. Set Row Level Security (RLS)

RLS is already configured in the migration, but verify:
1. Go to Database ‚Üí Tables
2. Check that RLS is enabled on `users` and `user_data` tables
3. Review policies in Authentication ‚Üí Policies

## üí≥ Payment Setup (Stripe)

### 1. Create Stripe Account

1. Sign up at [stripe.com](https://stripe.com)
2. Use test mode for development

### 2. Get API Keys

From Dashboard ‚Üí Developers ‚Üí API keys:
- `Publishable key` ‚Üí `PLASMO_PUBLIC_STRIPE_PUBLISHABLE_KEY`
- `Secret key` ‚Üí `STRIPE_SECRET_KEY`

### 3. Create Products and Prices

1. Go to Products ‚Üí Add product
2. Create subscription products:
   ```
   Pro Plan - $9/month
   Premium Plan - $19/month
   ```
3. Copy price IDs to your `.env` file

### 4. Set Up Webhooks

1. Go to Developers ‚Üí Webhooks
2. Add endpoint:
   - URL: `https://yourdomain.com/api/stripe/webhook`
   - Events:
     - `checkout.session.completed`
     - `customer.subscription.updated`
     - `customer.subscription.deleted`
3. Copy signing secret ‚Üí `STRIPE_WEBHOOK_SECRET`

### 5. Configure Customer Portal

1. Go to Settings ‚Üí Billing ‚Üí Customer portal
2. Enable and configure features
3. Save configuration

## üîê Authentication Setup

### Google OAuth Setup

1. Go to [Google Cloud Console](https://console.cloud.google.com)
2. Create a new project or select existing
3. Enable APIs:
   - Chrome Identity API
   - Google+ API
4. Create credentials:
   - OAuth 2.0 Client ID
   - Application type: Chrome Extension
   - Add your extension ID (get from `chrome://extensions` after loading)
5. Copy Client ID ‚Üí `GOOGLE_OAUTH_CLIENT_ID`

### Extension Permissions

Update `manifest.json` permissions:
```json
{
  "permissions": ["identity"],
  "oauth2": {
    "client_id": "YOUR_CLIENT_ID.apps.googleusercontent.com",
    "scopes": ["openid", "email", "profile"]
  }
}
```

## üíª Development Workflow

### 1. Start Development Server

```bash
pnpm dev
```

This will:
- Start Plasmo dev server
- Enable hot reload
- Build to `build/chrome-mv3-dev`

### 2. Load Extension in Browser

1. Open `chrome://extensions/`
2. Enable "Developer mode"
3. Click "Load unpacked"
4. Select `build/chrome-mv3-dev` folder

### 3. Development Tips

- **Popup**: Click extension icon to test
- **Options**: Right-click icon ‚Üí Options
- **Background**: Check service worker in DevTools
- **Content Scripts**: Test on matching URLs

### 4. Project Structure

```
src/
‚îú‚îÄ‚îÄ background/      # Service worker
‚îú‚îÄ‚îÄ contents/        # Content scripts
‚îú‚îÄ‚îÄ popup/          # Extension popup
‚îú‚îÄ‚îÄ options/        # Options page
‚îú‚îÄ‚îÄ newtab/         # New tab override
‚îú‚îÄ‚îÄ sidepanel/      # Chrome side panel
‚îú‚îÄ‚îÄ tabs/           # Extension pages
‚îú‚îÄ‚îÄ core/           # Shared utilities
‚îú‚îÄ‚îÄ hooks/          # React hooks
‚îî‚îÄ‚îÄ components/     # UI components
```

## üß™ Testing

### Run Tests

```bash
# Run all tests
pnpm test

# Watch mode
pnpm test:watch

# Coverage report
pnpm test:coverage
```

### Writing Tests

Example test file:
```typescript
// src/components/__tests__/Button.test.tsx
import { render, screen } from '@testing-library/react'
import { Button } from '../Button'

describe('Button', () => {
  it('renders correctly', () => {
    render(<Button>Click me</Button>)
    expect(screen.getByText('Click me')).toBeInTheDocument()
  })
})
```

### E2E Testing

For end-to-end testing, use Playwright:
```bash
# Install Playwright
pnpm add -D @playwright/test

# Run E2E tests
pnpm test:e2e
```

## üöÄ Deployment

### 1. Build for Production

```bash
# Build all versions
pnpm build

# Build specific browser
pnpm build:chrome
pnpm build:firefox
pnpm build:edge
```

### 2. Package Extension

```bash
pnpm package
```

Creates:
- `chrome-extension.zip`
- `firefox-extension.zip`
- `edge-extension.zip`

### 3. Chrome Web Store

1. Go to [Chrome Web Store Developer Dashboard](https://chrome.google.com/webstore/devconsole)
2. Pay one-time $5 developer fee
3. Upload `chrome-extension.zip`
4. Fill in listing details:
   - Description
   - Screenshots (1280x800 or 640x400)
   - Icons
   - Categories
5. Submit for review

### 4. Automated Publishing

Set up GitHub Actions secrets:
- `CHROME_BPP_KEYS`
- `FIREFOX_BPP_KEYS`
- `EDGE_BPP_KEYS`

Then tag a release:
```bash
git tag v1.0.0
git push origin v1.0.0
```

## üêõ Troubleshooting

### Common Issues

#### Extension not loading
- Check for errors in `chrome://extensions/`
- Verify manifest.json is valid
- Check console for errors

#### Hot reload not working
- Restart dev server
- Manually reload extension
- Check if using correct build folder

#### Content script not injecting
- Verify URL matches pattern
- Check permissions in manifest
- Look for errors in page console

#### API calls failing
- Check CORS settings
- Verify environment variables
- Check network tab for errors

### Debug Tips

1. **Background Script**
   ```javascript
   // Add logging
   console.log('[Background]', 'Message received:', message)
   ```

2. **Storage Issues**
   ```javascript
   // Check storage contents
   chrome.storage.local.get(null, (data) => {
     console.log('Storage:', data)
   })
   ```

3. **Message Passing**
   ```javascript
   // Log all messages
   chrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {
     console.log('Message:', msg, 'From:', sender)
   })
   ```

## üìö Resources

### Documentation
- [Chrome Extension Docs](https://developer.chrome.com/docs/extensions/)
- [Plasmo Framework](https://docs.plasmo.com/)
- [Supabase Docs](https://supabase.com/docs)
- [Stripe Docs](https://stripe.com/docs)

### Support
- [Discord Community](https://discord.gg/yourcommunity)
- [GitHub Issues](https://github.com/yourusername/ultimate-chrome-extension/issues)
- [Stack Overflow](https://stackoverflow.com/questions/tagged/chrome-extension)

### Examples
- [Example Extensions](https://github.com/GoogleChrome/chrome-extensions-samples)
- [Plasmo Examples](https://github.com/PlasmoHQ/examples)

---

## üéâ Next Steps

1. **Customize UI**: Update colors and branding in `tailwind.config.js`
2. **Add Features**: Implement your unique functionality
3. **Set Up Analytics**: Configure Google Analytics or PostHog
4. **Configure Error Tracking**: Set up Sentry
5. **Create Landing Page**: Build a website for your extension
6. **Plan Marketing**: Prepare launch strategy

Good luck with your extension! üöÄ




// plasmo.config.ts
import { defineConfig } from "plasmo"

export default defineConfig({
  // Extension manifest configuration
  manifest: {
    // Required fields
    name: process.env.PLASMO_PUBLIC_EXTENSION_NAME || "Ultimate Chrome Extension",
    version: process.env.npm_package_version || "1.0.0",
    description: process.env.npm_package_description || "A powerful Chrome extension",
    
    // Permissions
    permissions: [
      "storage",
      "tabs",
      "contextMenus",
      "notifications",
      "alarms",
      "identity",
      "sidePanel"
    ],
    
    optional_permissions: [
      "bookmarks",
      "history",
      "downloads",
      "webNavigation",
      "cookies",
      "management"
    ],
    
    // Host permissions for accessing websites
    host_permissions: [
      "https://*/*",
      "http://*/*"
    ],
    
    // OAuth2 configuration for Google login
    oauth2: {
      client_id: process.env.GOOGLE_OAUTH_CLIENT_ID,
      scopes: [
        "openid",
        "email", 
        "profile"
      ]
    },
    
    // Extension pages
    options_ui: {
      page: "options.html",
      open_in_tab: true
    },
    
    // DevTools page
    devtools_page: "devtools.html",
    
    // Side panel configuration (Chrome 114+)
    side_panel: {
      default_path: "sidepanel.html"
    },
    
    // Web accessible resources
    web_accessible_resources: [
      {
        resources: [
          "assets/*",
          "tabs/*",
          "inject/*"
        ],
        matches: ["<all_urls>"]
      }
    ],
    
    // Content Security Policy
    content_security_policy: {
      extension_pages: "script-src 'self'; object-src 'self'"
    },
    
    // Commands (keyboard shortcuts)
    commands: {
      "_execute_action": {
        suggested_key: {
          default: "Ctrl+Shift+E",
          mac: "Command+Shift+E"
        },
        description: "Open extension popup"
      },
      "toggle-feature": {
        suggested_key: {
          default: "Ctrl+Shift+X",
          mac: "Command+Shift+X"
        },
        description: "Toggle main feature"
      }
    },
    
    // Icons
    icons: {
      "16": "./assets/icon-16.png",
      "48": "./assets/icon-48.png",
      "128": "./assets/icon-128.png"
    },
    
    // Background service worker
    background: {
      service_worker: "background.js",
      type: "module"
    },
    
    // Extension action (toolbar icon)
    action: {
      default_popup: "popup.html",
      default_icon: {
        "16": "./assets/icon-16.png",
        "48": "./assets/icon-48.png",
        "128": "./assets/icon-128.png"
      },
      default_title: "Click to open extension"
    }
  },
  
  // Build configuration
  build: {
    // Override build directory
    outDir: "build",
    
    // Source maps for debugging
    sourceMap: process.env.NODE_ENV === "development",
    
    // Minification
    minify: process.env.NODE_ENV === "production",
    
    // Override specific entry points if needed
    entries: {
      popup: "./src/popup/index.tsx",
      options: "./src/options/index.tsx",
      newtab: "./src/newtab/index.tsx",
      sidepanel: "./src/sidepanel/index.tsx",
      background: "./src/background/index.ts",
      content: "./src/contents/overlay.tsx"
    }
  },
  
  // Development server configuration
  server: {
    port: process.env.PORT ? parseInt(process.env.PORT) : 1815,
    hostname: "localhost"
  },
  
  // Target browsers
  target: ["chrome-mv3", "edge-mv3", "firefox-mv2"],
  
  // Environment variables to expose
  env: {
    PLASMO_PUBLIC_SUPABASE_URL: process.env.PLASMO_PUBLIC_SUPABASE_URL,
    PLASMO_PUBLIC_SUPABASE_ANON_KEY: process.env.PLASMO_PUBLIC_SUPABASE_ANON_KEY,
    PLASMO_PUBLIC_STRIPE_PUBLISHABLE_KEY: process.env.PLASMO_PUBLIC_STRIPE_PUBLISHABLE_KEY,
    PLASMO_PUBLIC_API_URL: process.env.PLASMO_PUBLIC_API_URL,
    PLASMO_PUBLIC_GA_MEASUREMENT_ID: process.env.PLASMO_PUBLIC_GA_MEASUREMENT_ID,
    PLASMO_PUBLIC_SENTRY_DSN: process.env.PLASMO_PUBLIC_SENTRY_DSN
  }
})










// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}






// .lintstagedrc.json
{
  "*.{ts,tsx}": [
    "eslint --fix",
    "prettier --write"
  ],
  "*.{js,jsx}": [
    "eslint --fix",
    "prettier --write"
  ],
  "*.{css,scss,sass}": [
    "prettier --write"
  ],
  "*.{json,md,mdx,yml,yaml}": [
    "prettier --write"
  ],
  "*.{html}": [
    "prettier --write"
  ]
}







#!/usr/bin/env sh
# .husky/pre-commit
. "$(dirname -- "$0")/_/husky.sh"

npx lint-staged






// scripts/generate-icons.js
const sharp = require('sharp')
const fs = require('fs').promises
const path = require('path')

const SIZES = [16, 48, 128, 512]
const SOURCE_ICON = 'assets/icon-source.png' // Your source icon (should be 512x512 or larger)
const OUTPUT_DIR = 'assets'

async function generateIcons() {
  try {
    // Ensure output directory exists
    await fs.mkdir(OUTPUT_DIR, { recursive: true })
    
    // Check if source icon exists
    try {
      await fs.access(SOURCE_ICON)
    } catch {
      console.log('Source icon not found. Creating placeholder icons...')
      await createPlaceholderIcons()
      return
    }
    
    // Generate icons from source
    console.log('Generating icons from source...')
    
    for (const size of SIZES) {
      const outputPath = path.join(OUTPUT_DIR, `icon-${size}.png`)
      
      await sharp(SOURCE_ICON)
        .resize(size, size, {
          fit: 'contain',
          background: { r: 0, g: 0, b: 0, alpha: 0 }
        })
        .png()
        .toFile(outputPath)
      
      console.log(`‚úì Generated ${outputPath}`)
    }
    
    console.log('\n‚úÖ All icons generated successfully!')
    
  } catch (error) {
    console.error('Error generating icons:', error)
    process.exit(1)
  }
}

async function createPlaceholderIcons() {
  const svg = (size) => `
    <svg width="${size}" height="${size}" xmlns="http://www.w3.org/2000/svg">
      <rect width="${size}" height="${size}" fill="#4F46E5" rx="${size * 0.2}"/>
      <text 
        x="50%" 
        y="50%" 
        text-anchor="middle" 
        dominant-baseline="middle" 
        fill="white" 
        font-family="Arial, sans-serif" 
        font-size="${size * 0.4}px" 
        font-weight="bold"
      >
        ${size}
      </text>
    </svg>
  `
  
  for (const size of SIZES) {
    const outputPath = path.join(OUTPUT_DIR, `icon-${size}.png`)
    
    await sharp(Buffer.from(svg(size)))
      .png()
      .toFile(outputPath)
    
    console.log(`‚úì Created placeholder ${outputPath}`)
  }
  
  console.log('\n‚ö†Ô∏è  Placeholder icons created. Replace with your actual icon!')
  console.log(`Place your source icon at: ${SOURCE_ICON}`)
}

// Run the script
generateIcons()






// scripts/build-all.js
const { execSync } = require('child_process')
const fs = require('fs').promises
const path = require('path')

const TARGETS = [
  { name: 'chrome', target: 'chrome-mv3' },
  { name: 'firefox', target: 'firefox-mv2' },
  { name: 'edge', target: 'edge-mv3' }
]

async function buildAll() {
  console.log('üöÄ Building extension for all targets...\n')
  
  try {
    // Clean previous builds
    console.log('üßπ Cleaning previous builds...')
    await fs.rm('build', { recursive: true, force: true })
    
    // Build each target
    for (const { name, target } of TARGETS) {
      console.log(`\nüì¶ Building for ${name}...`)
      
      try {
        execSync(`pnpm plasmo build --target=${target}`, {
          stdio: 'inherit',
          env: { ...process.env, NODE_ENV: 'production' }
        })
        
        console.log(`‚úÖ ${name} build complete!`)
        
        // Get build size
        const buildPath = path.join('build', `${target}-prod`)
        const stats = await getBuildSize(buildPath)
        console.log(`   Size: ${stats.size} (${stats.files} files)`)
        
      } catch (error) {
        console.error(`‚ùå Failed to build ${name}:`, error.message)
        process.exit(1)
      }
    }
    
    // Create packages
    console.log('\nüì¶ Creating distribution packages...')
    await createPackages()
    
    console.log('\n‚úÖ All builds completed successfully!')
    console.log('\nüìä Build Summary:')
    
    for (const { name, target } of TARGETS) {
      const zipPath = path.join('build', `${name}-extension.zip`)
      try {
        const stats = await fs.stat(zipPath)
        console.log(`   ${name}: ${formatBytes(stats.size)}`)
      } catch (error) {
        console.log(`   ${name}: Not packaged`)
      }
    }
    
  } catch (error) {
    console.error('‚ùå Build failed:', error)
    process.exit(1)
  }
}

async function getBuildSize(dirPath) {
  let totalSize = 0
  let fileCount = 0
  
  async function walkDir(dir) {
    const files = await fs.readdir(dir)
    
    for (const file of files) {
      const filePath = path.join(dir, file)
      const stat = await fs.stat(filePath)
      
      if (stat.isDirectory()) {
        await walkDir(filePath)
      } else {
        totalSize += stat.size
        fileCount++
      }
    }
  }
  
  await walkDir(dirPath)
  
  return {
    size: formatBytes(totalSize),
    files: fileCount
  }
}

async function createPackages() {
  const archiver = require('archiver')
  
  for (const { name, target } of TARGETS) {
    const buildPath = path.join('build', `${target}-prod`)
    const outputPath = path.join('build', `${name}-extension.zip`)
    
    try {
      await fs.access(buildPath)
    } catch {
      console.log(`‚ö†Ô∏è  Skipping ${name} package - build not found`)
      continue
    }
    
    await new Promise((resolve, reject) => {
      const output = require('fs').createWriteStream(outputPath)
      const archive = archiver('zip', { zlib: { level: 9 } })
      
      output.on('close', resolve)
      archive.on('error', reject)
      
      archive.pipe(output)
      archive.directory(buildPath, false)
      archive.finalize()
    })
    
    console.log(`‚úÖ Created ${name}-extension.zip`)
  }
}

function formatBytes(bytes) {
  if (bytes === 0) return '0 Bytes'
  
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

// Check if archiver is installed
try {
  require('archiver')
} catch {
  console.log('üì¶ Installing archiver for packaging...')
  execSync('pnpm add -D archiver', { stdio: 'inherit' })
}

// Run the build
buildAll()









// .vscode/settings.json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.organizeImports": true
  },
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[css]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "files.exclude": {
    "**/node_modules": true,
    "**/.plasmo": true,
    "**/build": false,
    "**/.DS_Store": true,
    "**/Thumbs.db": true
  },
  "search.exclude": {
    "**/node_modules": true,
    "**/build": true,
    "**/.plasmo": true,
    "**/coverage": true,
    "**/*.lock": true
  },
  "editor.quickSuggestions": {
    "strings": true
  },
  "tailwindCSS.experimental.classRegex": [
    ["cn\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["clsx\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"],
    ["twMerge\\(([^)]*)\\)", "[\"'`]([^\"'`]*).*?[\"'`]"]
  ],
  "files.associations": {
    "*.css": "tailwindcss"
  },
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "editor.rulers": [80, 120],
  "editor.wordWrap": "on",
  "git.autofetch": true,
  "git.enableSmartCommit": true,
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "explorer.compactFolders": false,
  "workbench.editor.labelFormat": "short",
  "editor.minimap.enabled": false,
  "editor.linkedEditing": true,
  "editor.suggest.insertMode": "replace",
  "npm.packageManager": "pnpm",
  "eslint.packageManager": "pnpm"
}









// .vscode/extensions.json
{
  "recommendations": [
    // Essential
    "dbaeumer.vscode-eslint",
    "esbenp.prettier-vscode",
    "bradlc.vscode-tailwindcss",
    
    // TypeScript & React
    "ms-vscode.vscode-typescript-next",
    "dsznajder.es7-react-js-snippets",
    "burkeholland.simple-react-snippets",
    
    // Chrome Extension Development
    "plasmo.plasmo-vscode",
    
    // Productivity
    "christian-kohler.path-intellisense",
    "aaron-bond.better-comments",
    "formulahendry.auto-rename-tag",
    "naumovs.color-highlight",
    "streetsidesoftware.code-spell-checker",
    
    // Git
    "eamodio.gitlens",
    "mhutchie.git-graph",
    
    // Testing
    "orta.vscode-jest",
    "ms-playwright.playwright",
    
    // Database
    "mtxr.sqltools",
    
    // Other useful extensions
    "yzhang.markdown-all-in-one",
    "ms-azuretools.vscode-docker",
    "gruntfuggly.todo-tree",
    "wix.vscode-import-cost",
    "usernamehw.errorlens",
    "mikestead.dotenv",
    "csstools.postcss",
    "prisma.prisma"
  ]
}










// Fact-Check-Companion.md

# üìã Fact-Check Companion - System Design Document

## üéØ Executive Summary

**Fact-Check Companion** l√† m·ªôt browser extension gi√∫p ng∆∞·ªùi d√πng ph√°t tri·ªÉn t∆∞ duy ph·∫£n bi·ªán khi ƒë·ªçc n·ªôi dung online. Extension s·∫Ω ph√¢n t√≠ch real-time c√°c b√†i vi·∫øt, highlight c√°c claim c·∫ßn verify, ƒë√°nh gi√° ƒë·ªô tin c·∫≠y c·ªßa ngu·ªìn, v√† g·ª£i √Ω c√°c c√¢u h·ªèi ph·∫£n bi·ªán.

### Key Features
- üîç **Real-time Claim Detection**: T·ª± ƒë·ªông ph√°t hi·ªán v√† highlight c√°c claim c√≥ th·ªÉ fact-check
- üìä **Source Credibility Score**: ƒê√°nh gi√° ƒë·ªô tin c·∫≠y c·ªßa website/t√°c gi·∫£
- üí≠ **Critical Questions**: G·ª£i √Ω c√¢u h·ªèi ph·∫£n bi·ªán contextual
- üîó **Fact-Check Integration**: K·∫øt n·ªëi v·ªõi APIs c·ªßa Snopes, PolitiFact, FactCheck.org
- üìà **Bias Detection**: Ph√¢n t√≠ch v√† c·∫£nh b√°o v·ªÅ potential bias
- üìö **Learning Mode**: Gi√∫p user h·ªçc c√°ch t∆∞ duy ph·∫£n bi·ªán

---

## üèóÔ∏è System Architecture

### High-Level Architecture

```mermaid
graph TB
    subgraph "Browser Extension"
        CS[Content Script]
        BG[Background Worker]
        PU[Popup UI]
        SP[Side Panel]
        OP[Options Page]
    end
    
    subgraph "Core Services"
        TD[Text Detector]
        CA[Claim Analyzer]
        SC[Credibility Scorer]
        QG[Question Generator]
        BD[Bias Detector]
    end
    
    subgraph "External APIs"
        FC1[Snopes API]
        FC2[PolitiFact API]
        FC3[FactCheck.org]
        WA[Wikipedia API]
        NA[News API]
        GA[Google Fact Check API]
    end
    
    subgraph "Backend Services"
        API[API Gateway]
        ML[ML Service]
        DB[(Database)]
        CACHE[(Redis Cache)]
    end
    
    CS --> TD
    TD --> CA
    CA --> BG
    BG --> API
    API --> FC1
    API --> FC2
    API --> FC3
    API --> ML
    ML --> DB
    API --> CACHE
```

### Component Architecture

```
fact-check-companion/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ background/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.ts                 # Main background worker
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ messages/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ analyze.ts          # Text analysis handler
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ factcheck.ts       # Fact-check API handler
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ credibility.ts     # Source credibility handler
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ services/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ claim-detector.ts   # Claim detection service
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ api-aggregator.ts   # External API aggregator
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ cache-manager.ts    # Cache management
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ contents/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ detector.ts             # Main content script
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ highlighter.tsx         # Claim highlighter component
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sidebar.tsx             # Fact-check sidebar
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tooltip.tsx             # Hover tooltips
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ml/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ claim-classifier.ts # ML claim classification
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ bias-detector.ts    # Bias detection algorithms
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ models/             # Pre-trained models
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ analysis/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ text-parser.ts      # NLP text parsing
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ entity-extractor.ts # Named entity recognition
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sentiment.ts        # Sentiment analysis
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ scoring/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ credibility.ts      # Credibility algorithms
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ reliability.ts      # Source reliability
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ metrics.ts          # Scoring metrics
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ popup/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx               # Popup main
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ summary.tsx             # Page analysis summary
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ quick-actions.tsx       # Quick action buttons
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ sidepanel/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx               # Side panel main
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ fact-results.tsx       # Fact-check results
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ questions.tsx           # Critical questions
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ sources.tsx             # Alternative sources
‚îÇ   ‚îÇ
‚îÇ   ‚îú‚îÄ‚îÄ options/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.tsx               # Options page
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ settings/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ general.tsx         # General settings
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ sources.tsx         # Fact-check sources
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ privacy.tsx         # Privacy settings
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ stats/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ dashboard.tsx       # Usage statistics
‚îÇ   ‚îÇ
‚îÇ   ‚îî‚îÄ‚îÄ api/
‚îÇ       ‚îú‚îÄ‚îÄ fact-checkers/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ snopes.ts           # Snopes integration
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ politifact.ts       # PolitiFact integration
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ factcheck.ts        # FactCheck.org integration
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ google.ts           # Google Fact Check API
‚îÇ       ‚îú‚îÄ‚îÄ sources/
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ wikipedia.ts        # Wikipedia verification
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ news-api.ts         # News cross-reference
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ media-bias.ts       # Media bias checker
‚îÇ       ‚îî‚îÄ‚îÄ aggregator.ts           # API response aggregator
```

---

## üîÑ Data Flow & Processing

### 1. Content Analysis Flow

```mermaid
sequenceDiagram
    participant User
    participant ContentScript
    participant TextParser
    participant ClaimDetector
    participant Background
    participant APIGateway
    participant FactCheckAPIs
    
    User->>ContentScript: Loads webpage
    ContentScript->>TextParser: Extract article text
    TextParser->>ClaimDetector: Parse sentences
    ClaimDetector->>ClaimDetector: Identify factual claims
    ClaimDetector->>Background: Send claims batch
    Background->>APIGateway: Request fact-checks
    APIGateway->>FactCheckAPIs: Query multiple sources
    FactCheckAPIs-->>APIGateway: Return results
    APIGateway-->>Background: Aggregated results
    Background-->>ContentScript: Update UI
    ContentScript-->>User: Highlight claims
```

### 2. Credibility Scoring Flow

```mermaid
graph LR
    A[Website URL] --> B[Domain Analysis]
    B --> C{Known Source?}
    C -->|Yes| D[Retrieve History]
    C -->|No| E[New Analysis]
    
    D --> F[Historical Accuracy]
    E --> G[Domain Age/WHOIS]
    E --> H[Content Analysis]
    E --> I[Cross-Reference]
    
    F --> J[Credibility Score]
    G --> J
    H --> J
    I --> J
    
    J --> K[0-100 Score]
    K --> L[Visual Indicator]
```

---

## üé® User Interface Design

### 1. Content Highlighting System

```typescript
// Claim severity levels and colors
enum ClaimSeverity {
  VERIFIED = 'green',      // ‚úì Fact-checked and true
  DISPUTED = 'orange',     // ‚ö† Conflicting information
  FALSE = 'red',          // ‚úó Fact-checked and false
  UNVERIFIED = 'blue',    // ? Not yet verified
  OPINION = 'purple'      // üí≠ Opinion, not factual claim
}

// Highlight styling
interface HighlightStyle {
  backgroundColor: string;
  borderBottom: string;
  cursor: 'help';
  position: 'relative';
}
```

### 2. UI Components

#### A. Inline Highlights
```
[Factual claim text] ‚Üí Highlighted with underline
    ‚Üì (on hover)
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üìä Claim Analysis           ‚îÇ
‚îÇ Status: ‚ö† Disputed          ‚îÇ
‚îÇ Confidence: 67%             ‚îÇ
‚îÇ Sources: 3 checked          ‚îÇ
‚îÇ [View Details]              ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

#### B. Side Panel Interface
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ üîç Fact-Check Results          ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Page Credibility: 72/100    üü° ‚îÇ
‚îÇ Claims Found: 12               ‚îÇ
‚îÇ Verified: 7 | Disputed: 3      ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìã Claims:                     ‚îÇ
‚îÇ                                ‚îÇ
‚îÇ 1. "GDP grew by 3.2%..." ‚úì    ‚îÇ
‚îÇ    ‚îú‚îÄ PolitiFact: True         ‚îÇ
‚îÇ    ‚îî‚îÄ Context: Q2 2023 data    ‚îÇ
‚îÇ                                ‚îÇ
‚îÇ 2. "Crime rates fell..." ‚ö†     ‚îÇ
‚îÇ    ‚îú‚îÄ Snopes: Mostly True      ‚îÇ
‚îÇ    ‚îî‚îÄ Note: Regional variance  ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üí≠ Critical Questions:         ‚îÇ
‚îÇ ‚Ä¢ What's the data source?      ‚îÇ
‚îÇ ‚Ä¢ Any conflicting reports?     ‚îÇ
‚îÇ ‚Ä¢ Who funded this study?       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

#### C. Popup Summary
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Fact-Check Companion    ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ üìä Current Page         ‚îÇ
‚îÇ Trust Score: 68%    üü°  ‚îÇ
‚îÇ Claims: 8 detected      ‚îÇ
‚îÇ                         ‚îÇ
‚îÇ [üîç Deep Analysis]      ‚îÇ
‚îÇ [üìö View Sources]       ‚îÇ
‚îÇ [‚öôÔ∏è Settings]           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## üíª Technical Implementation

### 1. Core Technologies

- **Frontend**: React 18 + TypeScript
- **Styling**: Tailwind CSS
- **State Management**: Zustand + React Query
- **ML/NLP**: TensorFlow.js + compromise.js
- **Backend**: Supabase + Edge Functions
- **Caching**: Redis
- **Analytics**: PostHog

### 2. Key Algorithms

#### A. Claim Detection Algorithm
```typescript
interface ClaimDetector {
  // Step 1: Sentence segmentation
  segmentText(text: string): Sentence[];
  
  // Step 2: Feature extraction
  extractFeatures(sentence: Sentence): Features;
  
  // Step 3: Classification
  classifyClaim(features: Features): {
    isClaim: boolean;
    confidence: number;
    type: 'statistical' | 'factual' | 'causal' | 'comparative';
  };
  
  // Step 4: Entity extraction
  extractEntities(claim: string): {
    subjects: string[];
    predicates: string[];
    objects: string[];
    numbers: string[];
    dates: string[];
  };
}
```

#### B. Credibility Scoring Algorithm
```typescript
interface CredibilityScorer {
  calculateScore(source: Source): number {
    const factors = {
      domainAge: this.checkDomainAge(source.url),        // 0-20
      httpsEnabled: source.url.startsWith('https'),      // 0-10
      authorCredentials: this.checkAuthor(source.author), // 0-20
      citationQuality: this.analyzeCitations(source),     // 0-20
      factCheckHistory: this.getHistoricalAccuracy(),     // 0-30
    };
    
    return Object.values(factors).reduce((a, b) => a + b, 0);
  }
}
```

#### C. Question Generation Engine
```typescript
interface QuestionGenerator {
  generateQuestions(claim: Claim, context: Context): Question[] {
    const templates = {
      source: "What is the original source of this information?",
      methodology: "How was this data collected?",
      bias: "What potential biases might affect this claim?",
      alternative: "Are there alternative explanations?",
      evidence: "What evidence supports this claim?",
      timeframe: "When was this information published?",
      funding: "Who funded this research/article?",
      sample: "What was the sample size/scope?",
      correlation: "Is this correlation or causation?",
      context: "What context might be missing?"
    };
    
    return this.selectRelevantQuestions(claim, templates);
  }
}
```

### 3. External API Integration

#### A. Unified Fact-Check Interface
```typescript
interface FactCheckAPI {
  search(claim: string): Promise<FactCheckResult>;
}

class FactCheckAggregator {
  private apis: Map<string, FactCheckAPI> = new Map([
    ['snopes', new SnopesAPI()],
    ['politifact', new PolitiFactAPI()],
    ['factcheck', new FactCheckOrgAPI()],
    ['google', new GoogleFactCheckAPI()]
  ]);
  
  async checkClaim(claim: string): Promise<AggregatedResult> {
    const results = await Promise.allSettled(
      Array.from(this.apis.values()).map(api => 
        api.search(claim)
      )
    );
    
    return this.aggregateResults(results);
  }
}
```

### 4. Performance Optimization

#### A. Caching Strategy
```typescript
class CacheManager {
  private cache = new Map<string, CachedResult>();
  private readonly TTL = 24 * 60 * 60 * 1000; // 24 hours
  
  async get(key: string): Promise<CachedResult | null> {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.TTL) {
      return cached;
    }
    return null;
  }
  
  set(key: string, result: any): void {
    this.cache.set(key, {
      data: result,
      timestamp: Date.now()
    });
  }
}
```

#### B. Batch Processing
```typescript
class BatchProcessor {
  private queue: Claim[] = [];
  private processing = false;
  
  async addClaim(claim: Claim): Promise<void> {
    this.queue.push(claim);
    if (!this.processing) {
      this.processBatch();
    }
  }
  
  private async processBatch(): Promise<void> {
    this.processing = true;
    
    while (this.queue.length > 0) {
      const batch = this.queue.splice(0, 10); // Process 10 at a time
      await this.processClaimBatch(batch);
      await this.delay(100); // Rate limiting
    }
    
    this.processing = false;
  }
}
```

---

## üîê Privacy & Security

### 1. Data Protection

- **Local Processing First**: Ph√¢n t√≠ch text locally tr∆∞·ªõc khi g·ª≠i API
- **Anonymization**: Remove PII tr∆∞·ªõc khi g·ª≠i external APIs
- **Opt-in Analytics**: User c√≥ full control v·ªÅ data sharing
- **Secure Storage**: Encrypt sensitive data v·ªõi user key

### 2. Permissions Required

```json
{
  "permissions": [
    "activeTab",      // ƒê·ªçc n·ªôi dung trang hi·ªán t·∫°i
    "storage",        // L∆∞u settings v√† cache
    "contextMenus"    // Right-click actions
  ],
  "optional_permissions": [
    "history",        // Analyze browsing patterns
    "bookmarks"       // Save fact-checked articles
  ],
  "host_permissions": [
    "https://*/*",    // Analyze any HTTPS site
    "http://*/*"      // Analyze HTTP sites (v·ªõi warning)
  ]
}
```

---

## üìä Analytics & Metrics

### 1. User Engagement Metrics
- Claims highlighted per session
- Fact-check interactions
- Critical questions viewed
- Time spent reviewing results

### 2. Accuracy Metrics
- Fact-check API agreement rate
- User feedback on results
- False positive/negative rates

### 3. Performance Metrics
- Page analysis time
- API response times
- Cache hit rates
- Extension impact on page load

---

## üöÄ Implementation Roadmap

### Phase 1: MVP (Month 1-2)
- [x] Basic claim detection
- [x] Integration v·ªõi 1 fact-check API
- [x] Simple highlighting UI
- [x] Basic credibility scoring

### Phase 2: Enhanced Features (Month 3-4)
- [ ] Multiple API integration
- [ ] Advanced NLP analysis
- [ ] Bias detection
- [ ] Question generation

### Phase 3: AI Integration (Month 5-6)
- [ ] Custom ML models
- [ ] Real-time learning
- [ ] Personalized recommendations
- [ ] Advanced visualizations

### Phase 4: Scale & Optimize (Month 7+)
- [ ] Performance optimization
- [ ] Multi-language support
- [ ] Mobile browser support
- [ ] API partnerships

---

## üß™ Testing Strategy

### 1. Unit Tests
- Claim detection accuracy
- API integration reliability
- Scoring algorithm validation

### 2. Integration Tests
- End-to-end fact-checking flow
- Cross-browser compatibility
- Performance benchmarks

### 3. User Testing
- A/B testing different UI approaches
- Usability studies
- Feedback loops

---

## üìà Success Metrics

1. **Adoption**: 10,000+ active users in 6 months
2. **Engagement**: 70% weekly active rate
3. **Accuracy**: 85%+ fact-check accuracy
4. **Performance**: <2s analysis time per page
5. **User Satisfaction**: 4.5+ star rating

---

## üîÑ Future Enhancements

1. **AI Writing Assistant**: Suggest fact-based corrections
2. **Social Media Integration**: Fact-check posts/tweets
3. **Collaborative Fact-Checking**: Community contributions
4. **Educational Mode**: Teach critical thinking skills
5. **API Marketplace**: Third-party integrations

---

## üìö Technical Documentation Links

- [API Documentation](#)
- [ML Model Specifications](#)
- [UI Component Library](#)
- [Security Whitepaper](#)
- [Performance Benchmarks](#)


















// Implementation-Guide.md

# üöÄ Fact-Check Companion - Implementation Guide

## üìã Quick Start Checklist

### Week 1: Project Setup & Foundation
- [ ] Initialize project t·ª´ template
- [ ] Configure environment variables
- [ ] Set up fact-checking API accounts
- [ ] Implement basic content script
- [ ] Create claim detection prototype

### Week 2: Core Features
- [ ] Build claim highlighter component
- [ ] Integrate first fact-check API
- [ ] Implement credibility scoring
- [ ] Create popup interface
- [ ] Add basic caching

### Week 3: Enhanced UI/UX
- [ ] Design and implement tooltip system
- [ ] Build side panel interface
- [ ] Add question generation
- [ ] Implement settings page
- [ ] Create onboarding flow

### Week 4: Testing & Polish
- [ ] Write comprehensive tests
- [ ] Performance optimization
- [ ] Bug fixes and refinements
- [ ] Prepare for release
- [ ] Documentation

---

## üõ†Ô∏è Step-by-Step Implementation

### Step 1: Initialize Project

```bash
# Clone and setup
./create-extension.sh

# Enter project details:
# Name: fact-check-companion
# Display: Fact-Check Companion
# Description: Real-time fact-checking and critical thinking assistant
# Include Supabase: Y (for caching and analytics)
# Include Stripe: N (free extension initially)
# Include Analytics: Y

cd fact-check-companion
```

### Step 2: Install Additional Dependencies

```bash
# NLP and Text Processing
pnpm add compromise natural chrono-node

# ML/AI Libraries
pnpm add @tensorflow/tfjs @tensorflow-models/universal-sentence-encoder

# Utilities
pnpm add fuse.js dompurify sanitize-html
pnpm add crypto-js axios-retry p-queue

# Development
pnpm add -D @types/natural @types/dompurify
```

### Step 3: Update Environment Variables

```bash
# .env.development
PLASMO_PUBLIC_EXTENSION_NAME="Fact-Check Companion"

# Fact-Checking APIs
PLASMO_PUBLIC_GOOGLE_FACTCHECK_API_KEY=your_google_api_key
PLASMO_PUBLIC_NEWSAPI_KEY=your_newsapi_key

# ML/AI Services (optional)
PLASMO_PUBLIC_OPENAI_API_KEY=your_openai_key # For question generation
PLASMO_PUBLIC_HUGGINGFACE_API_KEY=your_hf_key # For bias detection

# Analytics
PLASMO_PUBLIC_POSTHOG_KEY=your_posthog_key
```

### Step 4: Core Implementation Files

#### A. Claim Detector Service
```typescript
// src/core/analysis/claim-detector.ts
import nlp from 'compromise'
import * as tf from '@tensorflow/tfjs'

export class ClaimDetector {
  private model: tf.LayersModel | null = null
  
  async initialize() {
    // Load pre-trained model or use rule-based approach initially
    this.model = await tf.loadLayersModel('/models/claim-classifier/model.json')
  }
  
  detectClaims(text: string): Claim[] {
    const doc = nlp(text)
    const sentences = doc.sentences().out('array')
    
    return sentences
      .map(sentence => this.analyzeSentence(sentence))
      .filter(claim => claim.confidence > 0.7)
  }
  
  private analyzeSentence(sentence: string): Claim {
    // Rule-based detection for MVP
    const patterns = {
      statistical: /\b\d+(\.\d+)?%|\b\d+\s*(million|billion|thousand)/i,
      comparative: /\b(more|less|better|worse|higher|lower)\s+than\b/i,
      factual: /\b(is|are|was|were|has|have|had)\b.*\b(first|largest|smallest|only)\b/i,
      causal: /\b(because|due to|caused by|results in|leads to)\b/i
    }
    
    let claimType = null
    let confidence = 0
    
    for (const [type, pattern] of Object.entries(patterns)) {
      if (pattern.test(sentence)) {
        claimType = type
        confidence = 0.8
        break
      }
    }
    
    return {
      text: sentence,
      type: claimType,
      confidence,
      entities: this.extractEntities(sentence)
    }
  }
  
  private extractEntities(text: string) {
    const doc = nlp(text)
    return {
      people: doc.people().out('array'),
      places: doc.places().out('array'),
      organizations: doc.organizations().out('array'),
      dates: doc.dates().out('array'),
      numbers: doc.values().out('array')
    }
  }
}
```

#### B. Content Script Main
```typescript
// src/contents/detector.ts
import type { PlasmoCSConfig } from "plasmo"
import { ClaimDetector } from "~core/analysis/claim-detector"
import { Highlighter } from "./highlighter"

export const config: PlasmoCSConfig = {
  matches: ["<all_urls>"],
  exclude_matches: [
    "*://localhost/*",
    "*://*.google.com/*",
    "*://mail.google.com/*"
  ],
  run_at: "document_idle"
}

const detector = new ClaimDetector()
const highlighter = new Highlighter()

async function analyzePage() {
  // Skip if page doesn't look like an article
  if (!isArticlePage()) return
  
  // Get main content
  const content = extractMainContent()
  if (!content || content.length < 500) return
  
  // Detect claims
  await detector.initialize()
  const claims = detector.detectClaims(content)
  
  // Highlight claims in page
  highlighter.highlightClaims(claims)
  
  // Send to background for fact-checking
  chrome.runtime.sendMessage({
    type: "CLAIMS_DETECTED",
    claims: claims.map(c => ({
      text: c.text,
      type: c.type,
      entities: c.entities
    }))
  })
}

function isArticlePage(): boolean {
  // Check for article indicators
  const indicators = [
    document.querySelector('article'),
    document.querySelector('[role="article"]'),
    document.querySelector('.post-content'),
    document.querySelector('.article-body'),
    document.querySelector('main')
  ]
  
  return indicators.some(el => el !== null)
}

function extractMainContent(): string {
  // Try to find main content container
  const selectors = [
    'article',
    '[role="article"]',
    '.post-content',
    '.article-body',
    '.entry-content',
    'main'
  ]
  
  for (const selector of selectors) {
    const element = document.querySelector(selector)
    if (element && element.textContent) {
      return element.textContent
    }
  }
  
  // Fallback to body
  return document.body.textContent || ''
}

// Run analysis when page loads
analyzePage()

// Re-run on dynamic content changes
const observer = new MutationObserver(() => {
  analyzePage()
})

observer.observe(document.body, {
  childList: true,
  subtree: true
})
```

#### C. Highlighter Component
```typescript
// src/contents/highlighter.tsx
import { createRoot } from "react-dom/client"
import DOMPurify from "dompurify"

export class Highlighter {
  private highlights: Map<string, HTMLElement> = new Map()
  
  highlightClaims(claims: Claim[]) {
    claims.forEach(claim => {
      this.highlightText(claim)
    })
  }
  
  private highlightText(claim: Claim) {
    const walker = document.createTreeWalker(
      document.body,
      NodeFilter.SHOW_TEXT,
      {
        acceptNode: (node) => {
          if (node.textContent?.includes(claim.text)) {
            return NodeFilter.FILTER_ACCEPT
          }
          return NodeFilter.FILTER_REJECT
        }
      }
    )
    
    let node
    while (node = walker.nextNode()) {
      this.wrapClaimText(node as Text, claim)
    }
  }
  
  private wrapClaimText(textNode: Text, claim: Claim) {
    const span = document.createElement('span')
    span.className = 'fact-check-highlight'
    span.dataset.claimId = claim.id
    span.dataset.claimType = claim.type
    
    // Apply styling based on verification status
    span.style.cssText = `
      background-color: ${this.getHighlightColor(claim)};
      border-bottom: 2px solid ${this.getBorderColor(claim)};
      cursor: help;
      position: relative;
    `
    
    // Wrap the text
    const parent = textNode.parentNode
    parent?.insertBefore(span, textNode)
    span.appendChild(textNode)
    
    // Add hover tooltip
    span.addEventListener('mouseenter', (e) => {
      this.showTooltip(e.target as HTMLElement, claim)
    })
    
    span.addEventListener('mouseleave', () => {
      this.hideTooltip()
    })
    
    this.highlights.set(claim.id, span)
  }
  
  private getHighlightColor(claim: Claim): string {
    const colors = {
      verified: 'rgba(34, 197, 94, 0.2)',    // green
      disputed: 'rgba(251, 146, 60, 0.2)',   // orange
      false: 'rgba(239, 68, 68, 0.2)',       // red
      unverified: 'rgba(59, 130, 246, 0.2)', // blue
      opinion: 'rgba(147, 51, 234, 0.2)'     // purple
    }
    
    return colors[claim.status] || colors.unverified
  }
}
```

#### D. Fact-Check API Integration
```typescript
// src/api/fact-checkers/google.ts
export class GoogleFactCheckAPI {
  private apiKey: string
  private baseUrl = 'https://factchecktools.googleapis.com/v1alpha1/claims:search'
  
  constructor() {
    this.apiKey = process.env.PLASMO_PUBLIC_GOOGLE_FACTCHECK_API_KEY!
  }
  
  async search(query: string): Promise<FactCheckResult[]> {
    const params = new URLSearchParams({
      key: this.apiKey,
      query: query,
      languageCode: 'en'
    })
    
    try {
      const response = await fetch(`${this.baseUrl}?${params}`)
      const data = await response.json()
      
      return this.parseResults(data.claims || [])
    } catch (error) {
      console.error('Google Fact Check API error:', error)
      return []
    }
  }
  
  private parseResults(claims: any[]): FactCheckResult[] {
    return claims.map(claim => ({
      claim: claim.text,
      claimant: claim.claimant,
      claimDate: claim.claimDate,
      reviews: claim.claimReview?.map(review => ({
        publisher: review.publisher.name,
        url: review.url,
        rating: review.textualRating,
        title: review.title
      })) || []
    }))
  }
}
```

#### E. Side Panel UI
```typescript
// src/sidepanel/fact-results.tsx
import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "~components/ui/card"
import { Badge } from "~components/ui/badge"
import { ExternalLink, AlertCircle, CheckCircle, XCircle } from "lucide-react"

export function FactResults() {
  const [results, setResults] = useState<FactCheckResult[]>([])
  const [loading, setLoading] = useState(true)
  
  useEffect(() => {
    // Listen for fact-check results
    chrome.runtime.onMessage.addListener((message) => {
      if (message.type === "FACT_CHECK_RESULTS") {
        setResults(message.results)
        setLoading(false)
      }
    })
    
    // Request current results
    chrome.runtime.sendMessage({ type: "GET_CURRENT_RESULTS" })
  }, [])
  
  const getRatingIcon = (rating: string) => {
    const normalized = rating.toLowerCase()
    if (normalized.includes('true')) return <CheckCircle className="text-green-500" />
    if (normalized.includes('false')) return <XCircle className="text-red-500" />
    return <AlertCircle className="text-orange-500" />
  }
  
  return (
    <div className="space-y-4 p-4">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <span>Fact-Check Results</span>
            <Badge variant="outline">{results.length} claims</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="animate-pulse space-y-2">
              <div className="h-4 bg-gray-200 rounded w-3/4"></div>
              <div className="h-4 bg-gray-200 rounded w-1/2"></div>
            </div>
          ) : results.length > 0 ? (
            <div className="space-y-4">
              {results.map((result, idx) => (
                <div key={idx} className="border rounded-lg p-3">
                  <div className="flex items-start gap-2">
                    {getRatingIcon(result.reviews[0]?.rating || 'unknown')}
                    <div className="flex-1">
                      <p className="text-sm font-medium">{result.claim}</p>
                      <div className="mt-2 space-y-1">
                        {result.reviews.map((review, ridx) => (
                          <div key={ridx} className="flex items-center gap-2 text-xs">
                            <span className="font-medium">{review.publisher}:</span>
                            <span className={`
                              ${review.rating.toLowerCase().includes('true') ? 'text-green-600' : ''}
                              ${review.rating.toLowerCase().includes('false') ? 'text-red-600' : ''}
                              ${!review.rating.toLowerCase().includes('true') && 
                                !review.rating.toLowerCase().includes('false') ? 'text-orange-600' : ''}
                            `}>
                              {review.rating}
                            </span>
                            <a href={review.url} target="_blank" className="ml-auto">
                              <ExternalLink className="h-3 w-3" />
                            </a>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-sm text-muted-foreground">
              No claims detected on this page.
            </p>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
```

### Step 5: Testing Setup

```typescript
// src/__tests__/claim-detector.test.ts
import { ClaimDetector } from '~core/analysis/claim-detector'

describe('ClaimDetector', () => {
  let detector: ClaimDetector
  
  beforeEach(() => {
    detector = new ClaimDetector()
  })
  
  test('detects statistical claims', () => {
    const text = "Unemployment fell to 3.5% last month."
    const claims = detector.detectClaims(text)
    
    expect(claims).toHaveLength(1)
    expect(claims[0].type).toBe('statistical')
    expect(claims[0].confidence).toBeGreaterThan(0.7)
  })
  
  test('detects comparative claims', () => {
    const text = "This year's growth is higher than last year."
    const claims = detector.detectClaims(text)
    
    expect(claims).toHaveLength(1)
    expect(claims[0].type).toBe('comparative')
  })
  
  test('extracts entities correctly', () => {
    const text = "President Biden announced the plan in Washington."
    const claims = detector.detectClaims(text)
    
    expect(claims[0].entities.people).toContain('President Biden')
    expect(claims[0].entities.places).toContain('Washington')
  })
})
```

---

## üéØ MVP Features Priority

### Must Have (Week 1-2)
1. ‚úÖ Basic claim detection (rule-based)
2. ‚úÖ Visual highlighting
3. ‚úÖ Google Fact Check API integration
4. ‚úÖ Simple popup summary
5. ‚úÖ Basic caching

### Should Have (Week 3)
1. ‚è≥ Credibility scoring
2. ‚è≥ Multiple fact-check sources
3. ‚è≥ Question generation
4. ‚è≥ Side panel interface
5. ‚è≥ Settings page

### Nice to Have (Week 4+)
1. ‚è≥ ML-based claim detection
2. ‚è≥ Bias analysis
3. ‚è≥ Social sharing
4. ‚è≥ Export reports
5. ‚è≥ Learning mode

---

## üö¶ Development Workflow

### Daily Tasks
```bash
# Start development
pnpm dev

# Run tests continuously
pnpm test:watch

# Check TypeScript
pnpm type-check

# Format code
pnpm format
```

### Git Workflow
```bash
# Feature branch
git checkout -b feature/claim-detection

# Commit with conventional commits
git commit -m "feat: add claim detection algorithm"
git commit -m "fix: improve entity extraction accuracy"
git commit -m "docs: update API documentation"

# Create PR
gh pr create --title "Add claim detection" --body "..."
```

---

## üìö Resources & References

### Fact-Checking APIs
- [Google Fact Check Tools API](https://developers.google.com/fact-check/tools/api)
- [PolitiFact API](https://www.politifact.com/api/)
- [Snopes API](https://www.snopes.com/api/)
- [FactCheck.org](https://www.factcheck.org/)

### NLP Libraries
- [Compromise.js Docs](https://compromise.cool/)
- [Natural Language Toolkit](https://github.com/NaturalNode/natural)
- [spaCy.js](https://github.com/spacy-io/spacy-js)

### ML Resources
- [TensorFlow.js](https://www.tensorflow.org/js)
- [Hugging Face Models](https://huggingface.co/models)

### UI/UX Inspiration
- [Hypothesis](https://web.hypothes.is/) - Web annotation
- [Genius](https://genius.com/) - Text annotation
- [FactStream](https://factstream.co/) - Real-time fact-checking

---

## üÜò Common Issues & Solutions

### Issue: Content script not injecting
```javascript
// Solution: Check URL patterns and permissions
// manifest.json
{
  "content_scripts": [{
    "matches": ["<all_urls>"],
    "exclude_matches": ["*://*.pdf", "*://*.xml"],
    "run_at": "document_idle"
  }]
}
```

### Issue: API rate limiting
```javascript
// Solution: Implement caching and rate limiting
import pQueue from 'p-queue'

const queue = new pQueue({ 
  concurrency: 2, 
  interval: 1000, 
  intervalCap: 5 
})
```

### Issue: Performance on large pages
```javascript
// Solution: Lazy loading and pagination
const BATCH_SIZE = 10
const claims = await detector.detectClaims(text)
const batches = chunk(claims, BATCH_SIZE)

for (const batch of batches) {
  await processBatch(batch)
  await delay(100) // Prevent blocking
}
```

---

Ready to build! üöÄ B·∫Øt ƒë·∫ßu v·ªõi MVP features v√† iterate d·ª±a tr√™n user feedback.